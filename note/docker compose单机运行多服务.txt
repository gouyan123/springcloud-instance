# win7 powershell中 切换，关闭，删除default虚拟机
docker-machine env default
# 关闭default主机
docker-machine stop default
# 移除default主机
docker-machine rm default

# powershell中执行如下命令，创建 myvm虚拟机
docker-machine create --virtualbox-memory "6144" --engine-registry-mirror="https://s0iielsh.mirror.aliyuncs.com" --engine-insecure-registry="0.0.0.0/0" -d virtualbox myvm
# powershell中执行如下命令，切换到 myvm虚拟机
docker-machine.exe env myvm，返回& "F:\Program Files\Docker Toolbox\docker-machine.exe" env myvm | Invoke-Expression，复制该语句再执行；

# 为 myvm重新生成证书
docker-machine regenerate-certs myvm

# Windows上使用Docker Compose
# powershell切换到ssh连接 docker-machine ssh
# ssh连接中获取用户权限 sudo -i
# 执行如下 2条命令
curl -L https://github.com/docker/compose/releases/download/1.6.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
# 回到docker用户权限 exit
# 测试Docker-Compose安装成功 docker-compose --version
# stop停止所有容器，docker ps -a -q表示查看所有容器
docker stop $(docker ps -a -q)

# 基础环境(mysql...)与服务是分开部署的

# 通过服务编排工具 docker-compose部署基础环境，看deploy/docker-compose-middleware.yml文件；镜像image启动后，变成一个容器container，才能提供服务servic；
# docker-compose-middleware.yml中 environment表示环境变量，ip要换成主机名称hostname；
# elk = elasticsearch搜索 + logstash日志汇总 + kibana为es搜索提供可视化，即各服务将日志发送给logstash组件(或者logstash主动拉取各服务日志)，汇总后logstash
组件将日志存到elasticsearch组件，但是elasticsearch查询组件没有可视化工具，因此引入kibana作为查询可视化工具；
# zipkin：分布式调用 链路追踪，可视化管理工具；
# registry：运行私有仓库，存储公共镜像的地方；
# 运行 docker-compose-middleware.yml文件，使用docker-compose命令运行：
docker-compose.exe -f E:\deploy\docker-compose-middleware.yml -p dongnao up -d

# 查看当前正在运行的容器：
docker ps -a

# 将各项目打包，切换到 pom.xml文件所在目录：
mvn clean install
# 构建镜像 2 种方式：①将 FROM, ENTRYPOINT, CMD, MAINTAINER 以及 ADD 信息配置在 POM 中，不需要使用 Dockerfile 配置；②创建一个 Dockerfile，并在 POM中配置
dockerDirectory 来指定路径即可；
# 通过maven插件docker-maven-plugin，打包镜像，并将镜像存到私有仓库(registry)；

# 修改maven的conf/setting.xml文件，servers节点中加入docker私有仓库的用户名和密码信息；
<server>
 <id>docker-aliyun-hub</id>
 <username>admin</username>
 <password>123456</password>
 <configuration>
   <email>2637178209@qq.com</email>
 </configuration>
</server>
# 添加环境变量，设置docker私有仓库地址，可以设置永久的，也可以通过下面命令设置临时的，windows下powershell临时设置，当前窗口有效
$Env:DOCKER_REGISTRY_URL = "192.168.99.100:5000"
# 将指定的服务 构建镜像 并推送到私有仓库，在具体的服务下 pom.xml文件所在目录内执行；
mvn docker:build -DpushImage
