单机运行多服务步骤如下：
# 基础环境(mysql...)与服务是分开部署的
# 通过服务编排工具 docker-compose部署基础环境，看deploy/docker-compose-middleware.yml文件；镜像image启动后，变成一个容器container，才能提供服务servic；
# docker-compose-middleware.yml中 environment表示环境变量，ip要换成主机名称hostname；
# elk = elasticsearch搜索 + logstash日志汇总 + kibana为es搜索提供可视化，即各服务将日志发送给logstash组件(或者logstash主动拉取各服务日志)，汇总后logstash
组件将日志存到elasticsearch组件，但是elasticsearch查询组件没有可视化工具，因此引入kibana作为查询可视化工具；
# zipkin：分布式调用 链路追踪，可视化管理工具；
# registry：运行私有仓库，存储公共镜像的地方；
# 运行 docker-compose-middleware.yml文件，使用docker-compose命令运行：
docker-compose -f ./deploy/docker-compose-middleware.yml -p dongnao up -d

# 查看当前正在运行的容器：
docker ps -a

# 将各项目打包，切换到 pom.xml文件所在目录：
mvn clean install
# 使用maven插件docker-maven-plugin，将编译的包 打为镜像，并将该镜像放到 docker私有仓库上，docker-maven-plugin配置如下；
<plugin>
    <groupId>com.spotify</groupId>
    <artifactId>docker-maven-plugin</artifactId>
    <version>0.4.13</version>
    <configuration>
        <!--${env.DOCKER_REGISTRY_URL}/：镜像目录，在阿里云上就用阿里云地址；在自己私有仓库上面，就用自己私服的地址192.168.245.128:5000-->
        <!--设置环境变量 export DOCKER_REGISTRY_URL=192.168.245.128:5000 -->
        <imageName>${env.DOCKER_REGISTRY_URL}/${project.artifactId}:${project.version}</imageName>
        <!--将jar包和Dockerfile放到 同一个文件夹docker中-->
        <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
        <resources>
            <resource>
                <targetPath>/</targetPath>
                <directory>${project.build.directory}</directory>
                <include>${project.build.finalName}.jar</include>
            </resource>
        </resources>
        <!-- 以下两行是为了docker push到DockerHub使用的。 -->
        <serverId>docker-aliyun-hub</serverId>
        <registryUrl>registry.cn-hangzhou.aliyuncs.com/dongnao</registryUrl>
        <!--<registryUrl>${env.DOCKER_REGISTRY_URL}</registryUrl>-->
    </configuration>
</plugin>
将jar包构建为镜像 并发送到私有仓库：
mvn docker:build -DpushImage
# 构建镜像 2 种方式：①将 FROM, ENTRYPOINT, CMD, MAINTAINER 以及 ADD 信息配置在 POM 中，不需要使用 Dockerfile 配置；②创建一个 Dockerfile，并在 POM中配置
dockerDirectory 来指定路径即可；
# 通过maven插件docker-maven-plugin，打包镜像，并将镜像存到私有仓库(registry)；

# 修改maven的conf/setting.xml文件，servers节点中加入docker私有仓库的用户名和密码信息；
<server>
 <id>docker-aliyun-hub</id>
 <username>admin</username>
 <password>123456</password>
 <configuration>
   <email>2637178209@qq.com</email>
 </configuration>
</server>
# 添加环境变量，设置docker私有仓库地址，可以设置永久的，也可以通过下面命令设置临时的，windows下powershell临时设置，当前窗口有效
$Env:DOCKER_REGISTRY_URL = "192.168.99.100:5000"
cmd中
set DOCKER_REGISTRY_URL = "192.168.99.100:5000"
linux中
export DOCKER_REGISTRY_URL = "192.168.99.100:5000"
# 将指定的服务 构建镜像 并推送到私有仓库，在具体的服务下 pom.xml文件所在目录内执行；
mvn docker:build -DpushImage，注意 在service-center下打包(mvn clean package)，在service-center下的服务下创建镜像并推送(mvn docker:build -DpushImage)
